Hashing in tin (updated 21/05/96)
--------------

Group names (ie active[]) are hashed in a table called group_hash[]
for speed. Entry of -1 denotes no group at this hashnode, >= denotes
an index into active[]
Multiple groups on one node are chained via the .next field (another
index ptr to active[])


active.c:	init_group_hash() clears this structure
			find_group_index() returns index of group in active[]

	        read_news_active_file() has the code for linking in
            a new group to active[]. Maybe this should have its' own
            function.

art.c:		Lots of calls to hash_str()

hashstr.c:	hash_str()
			Hashes text (Reduces redundancy and memory
            thrashing, makes text compares much faster)

			In the article header, the following text is hashed :

            From: (including full name if supplied)
            Archive-name:
			Subject:

list.c:		psGrpFind() Fine a group in active. The code for this
			and the code in active.c to add a group are so similar
			they should be combined.

mail.c:		read_mail_active_file() again uses very similar code
			for adding to active[]

main.c:		Just the initialisers for hashing

memory.c:	Dynamic array management.
			hash_reclaim() - free up table[] which holds the 
			text cache

misc.c:		hash_groupname() returns hash key for a group
			This is also used to hash the actual filenames written
			in ~/.tin/.news (when not using NNTP)
			There is experimental code here for a (presumably)
			improved hash function that was never completed.

refs.c:     message-ids are hashed in a table called msgids[]
		 	The Message-ID and References headers from articles are
			hashed into this structure. When threading, each
			msgid in the hash has a pointer back to its article
			header in arts[] or ART_NORMAL if the article is not
			available
